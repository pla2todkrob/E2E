@{
    ViewBag.Title = "OpenAI";
}

@section scripts{
    <script>

        $(function () {
            callData('@Url.Action("OpenAI_History", "ChatBot")', '#historyArea').then(function () {
                reloadQuestion();
            });
        });

        function reloadQuestion() {
            callData('@Url.Action("OpenAI_Request", "ChatBot")', '#questionArea').then(function () {
                adjustHistoryHeight(document.getElementById("question"));
                bottomFunction('html');

                const totalElement = document.getElementById('totalToken');
                const maxToken = 4096;
                document.getElementById('maxToken').innerText = maxToken.toLocaleString(); // Use innerText to set the text content

                const totalToken = parseFloat(totalElement.textContent.replace(/,/g, ''));

                if (totalToken < maxToken * 0.5) {
                    totalElement.classList.add('text-success');
                } else if (totalToken <= maxToken * 0.7) {
                    totalElement.classList.add('text-warning');
                } else if (totalToken <= maxToken * 0.9) {
                    totalElement.classList.add('text-danger');
                }
                else {
                    swal('Request clear history', "Your chat history is nearing its limit.\nPlease clear the chat history.", 'warning').then(function () {
                        confirmAndPerformAjaxRequest('@Url.Action("OpenAI_ClearConversation", "ChatBot")', 'reloadPage');
                    });

                }
            });
        }

        function adjustTextareaHeight(event) {
            const textarea = event.target;
            const maxHeight = 256; // Maximum height for the textarea

            textarea.style.height = "auto";
            textarea.style.height = Math.min(textarea.scrollHeight, maxHeight) + "px";

            adjustHistoryHeight(textarea);
        }

        function adjustHistoryHeight(textarea) {
            if (textarea.scrollHeight <= 256) {
                const historyArea = document.getElementById("historyArea");
                const marginBottom = textarea.scrollHeight + 32;
                historyArea.style.marginBottom = marginBottom + "px";
            }

        }

        $(document).on('keydown', '#question', function (e) {
            if (e.keyCode === 13 && !e.shiftKey) {
                e.preventDefault(); // Prevent Enter key from creating a new line
                $('#RequestForm').submit(); // Submit the form
            }
            else {
                adjustTextareaHeight(e);
            }
        });

        $(document).on('submit', '#RequestForm', function (e) {
            e.preventDefault();
            let newId = '';

            function checkEmptyChat() {
                var emptyChatBlock = document.getElementById("emptyChat");

                // Check if the element exists before accessing its properties
                if (emptyChatBlock && emptyChatBlock.style.display !== "none") {
                    emptyChatBlock.remove();
                }
            }

            if ($('#question').val()) {
                const fd = new FormData(this);

                $.ajax({
                    url: '@Url.Action("OpenAI_Request","ChatBot")',
                    type: 'POST',
                    async: true,
                    data: fd,
                    processData: false,
                    contentType: false,
                    beforeSend: function () {
                        checkEmptyChat();

                        const ul = $('#histories');

                        let li = $('<li>').addClass('list-group-item');
                        let divRow = $('<div>').addClass('row');
                        let divCol1 = $('<div>').addClass('col-2 col-md-1 text-center');
                        let iUser = $('<i>').addClass('fa fa-user fa-2x');
                        divCol1.append(iUser);
                        let divCol2 = $('<div>').addClass('col-10 col-md-11');
                        let pUser = $('<p>').addClass('text-prewrap text-break').text($('#question').val());
                        let divCite = $('<div>').addClass('text-right');
                        let citeUser = $('<cite>').addClass('small mt-3').text(new Date().toLocaleString());
                        divCite.append(citeUser);
                        divCol2.append(pUser);
                        divCol2.append(divCite);
                        divRow.append(divCol1);
                        divRow.append(divCol2);
                        li.append(divRow);
                        ul.append(li);

                        $('#question').val('');

                        const childLength = ul.find('li').length;

                        li = $('<li>').addClass('list-group-item bg-light');
                        divRow = $('<div>').addClass('row');
                        divCol1 = $('<div>').addClass('col-2 col-md-1 text-center');
                        let iCogs = $('<i>').addClass('fa fa-android fa-2x');
                        divCol1.append(iCogs);
                        divCol2 = $('<div>').addClass('col-10 col-md-11');
                        newId = 'conversation_'.concat(childLength + 1);
                        let pCogs = $('<p>').addClass('text-prewrap text-break').attr('id', newId);
                        divCite = $('<div>').addClass('text-right');
                        let citeCogs = $('<cite>').addClass('small mt-3');
                        divCite.append(citeCogs);
                        divCol2.append(pCogs);
                        divCol2.append(divCite);
                        divRow.append(divCol1);
                        divRow.append(divCol2);
                        li.append(divRow);
                        ul.append(li);

                        bottomFunction('html');
                      },
                    success: function (json) {
                        $('#'.concat(newId)).parent('div').find('cite').text(new Date().toLocaleString());
                        typeWriter(json, newId, { disableTarget: 'question', scrollTarget: 'html', setLink: false });

                        reloadQuestion();
                    },
                    error: (error) => {
                        console.error(error);
                    }
                });
            }
            return false;
        });
    </script>
}

@section breadcrumb{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Chat bot</li>
            <li class="breadcrumb-item active" aria-current="page">External</li>
        </ol>
    </nav>
}

<div id="historyArea"></div>
<div class="fixed-bottom" id="bottomArea">
    <div class="container">
        <div class="card bg-transparent border-0">
            <div class="card-header bg-transparent border-0 px-0" id="questionArea">
            </div>
        </div>
    </div>
</div>
