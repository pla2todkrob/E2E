@model E2E.Models.Views.ClsServices

@{
    ViewBag.Title = "Service information";
    Guid userId = Guid.Parse(HttpContext.Current.User.Identity.Name);
}

@section scripts{
    <script src="~/signalr/hubs" type="text/javascript"></script>
    <script src="~/Asset/Service.js"></script>
    <script>
        $(function () {
            if ($(document).find('#TeamForm').length) {
                $('#TeamForm').find('select').each(function () {
                    $(this).select2({
                        theme: 'bootstrap4',
                        width: '100%'
                    });
                });
            }
            reloadComment();
            chat = $.connection.clsChatHub;

            // Declare a function on the chat hub so the server can invoke it
            chat.client.addChatMessage = function (message) {
                reloadComment();
            };

            $.connection.hub.start(function (start) {
                chat.server.joinGroup($('#Services_Service_Id').val());
            });
        });

        function reloadComment() {

            fetch('@Url.Action("_CommentHistory", "Services", new { id = Model.Services.Service_Id })')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                }).then(html => {
                    document.getElementById('commentHis').innerHTML = html;
                    fetch('@Url.Action("_Comment", "Services", new { id = Model.Services.Service_Id })')
                        .then(response2 => {
                            if (!response2.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response2.text();
                        }).then(html2 => {
                            document.getElementById('commentNew').innerHTML = html2;
                            adjustHeight();
                        }).catch(error2 => {
                            console.error('Error loading the new comment:', error2);
                        });
                }).catch(error => {
                    console.error('Error loading the comment history:', error);
                });
        }

        function SaveCloseForm() {
            let arr = [];

            swal({
                title: "Are you sure?",
                text: "If the score is already given, it cannot be changed!",
                icon: "warning",
                buttons: true,
            })
                .then((cf) => {
                    if (cf) {
                        var id_service = $('#Services_Service_Id').val();
                        $('.score-group').find('.score').each(function () {
                            var obj = {};
                            obj.id = $(this).attr('id');
                            obj.score = $(this).find('input[name=' + obj.id + ']:checked').val();
                            arr.push(obj);
                        });

                        $.ajax({
                            type: "POST",
                            data: { id: id_service, score: arr },
                            url: '@Url.Action("SetClose","Services")',
                            success: function (res) {
                                swal({
                                    title: res.Title,
                                    text: res.Text,
                                    icon: res.Icon,
                                    button: res.Button,
                                    dangerMode: res.DangerMode
                                }).then(function () {
                                    if (res.Icon == 'success') {
                                        location.reload();
                                    }
                                });
                            }
                        });
                    }
                });

            return false;
        }
        function callModalPoint(urlAjax) {
            $.ajax({
                url: urlAjax,
                async: true,
                success: function (res) {

                    $('#modalContent').html(res);

                    $('.Point').click(function () {
                        $(this).find('input').prop('checked',true);
                    });
                }
            });
            $('#modalArea').modal('show');
            return false;
        }

        $(document).on('submit', '#CommentForm', function (e) {
            e.preventDefault();
            var fd = new FormData(this);

            $.ajax({
                url: '@Url.Action("_Comment", "Services")',
                method: "POST",
                async: true,
                data: fd,
                processData: false,
                contentType: false,
                traditional: true,
                success: function (res) {
                    if (res.Icon != 'success') {
                        swal({
                            title: res.Title,
                            text: res.Text,
                            icon: res.Icon,
                            button: res.Button,
                            dangerMode: res.DangerMode
                        });
                    }
                    else {
                        chat.server.sendMessageToGroup(res.Option.Service_Id, res.Option.Comment_Content);
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX error:", status, error, "Response:", xhr.responseText);
                    swal({
                        title: "AJAX Error",
                        text: "Status: " + xhr.status + " - " + error,
                        icon: "error",
                        button: "OK"
                    });
                }

            });
            return false;
        });

        $(document).on('submit', '#TeamForm', function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("_AddTeam", "Services")',this);
            return false;
        });
        $(document).on('submit', '#ReturnForm', function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("SetPending", "Services")',this);
            return false;
        });
        $(document).on('submit', "#RejectForm", function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("SetReject","Services")', this);
            return false;
        });
        $(document).on('submit', '#ForwardForm', function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("SetForwarded", "Services")',this);
            return false;
        });
        $(document).on('submit', '#SetInProgressForm', function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("SetInProgress", "Services")', this);
            return false;
        });
        $(document).on('submit', '#CompleteForm', function (e) {
            e.preventDefault();
            let alertText = 'This information will be saved to the database.';
            @{
                if (Model.Services.Service_DueDate.Value < DateTime.Today)
                {
                    @:alertText = 'The due date is @Model.Services.Service_DueDate.Value.ToString("d").\nNow Overdue, are you sure you want to save?';
                }
            }
            callSubmitPage('@Url.Action("SetComplete", "Services")', this, {text:alertText});
            return false;
        });
        $(document).on('submit', '#SaveDocumentForm', function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("ServiceInfomation_Document", "Services")',this);
            return false;
        });
        $(document).on('submit', "#MustApproveForm", function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("SetMustApprove", "Services")', this);
            return false;
        });
        $(document).on('submit', '#ReturnAssignForm', function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("SetReturnAssign", "Services")', this);
            return false;
        });
        $(document).on('submit', '#RequestChangeDueForm', function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("RequestChangeDue_Form", "Services")', this);
            return false;
        });
        $(document).on('submit', "#RequestRejectForm", function (e) {
            e.preventDefault();
            callSubmitRedirect('@Url.Action("SetRequestReject", "Services")', this,'@Url.Action("Action", "Services")');
            return false;
        });
    </script>
}

@section breadcrumb{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
            <li class="breadcrumb-item active">Task</li>
            <li class="breadcrumb-item active" aria-current="page">Service information</li>
        </ol>
    </nav>
}

<blockquote class="blockquote text-right">
    <p class="mb-0">[<span class="copyText">@Model.Services.Service_Key</span>]&nbsp;<span class="copyText">@Html.DisplayFor(m => m.Services.Service_Subject)</span></p>
    <small class="blockquote-footer"><cite title="@Html.DisplayFor(m => m.Services.Create)">@Html.DisplayNameFor(m => m.Create_Name): @Html.DisplayFor(m => m.Create_Name)</cite></small>
</blockquote>
@Html.HiddenFor(m => m.Services.Service_Id)
<div class="row mb-3">
    <div class="col-lg-7 mb-3 mb-lg-0">
        <div class="card" id="serviceInfo">
            <div class="card-body">
                @Html.Partial("_ServiceDetails", Model)
            </div>
            <div class="card-footer">
                @Html.Partial("_ServiceActions", Model)
            </div>
        </div>
    </div>
    <div class="col-lg-5">
        <div class="card" id="serviceComment">
            <div class="card-header">
                <h5 class="card-title">Comment</h5>
            </div>
            <div class="card-body overflow-auto" id="commentHis"></div>
            <div class="card-footer" id="commentNew"></div>
        </div>
    </div>
</div>

@{ Html.RenderAction("_RefService", "Services", new { id = Model.Services.Service_Id }); }
