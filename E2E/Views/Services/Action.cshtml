@model E2E.Models.Views.clsServices

@{
    ViewBag.Title = "Action";
    Guid userId = Guid.Parse(HttpContext.Current.User.Identity.Name);
}
@section scripts{
    <script src="~/Asset/Service.min.js"></script>
    <script>

        $(document).on('submit', '#SaveForm', function (e) {
            e.preventDefault();
            callSubmitRedirect('@Url.Action("SetInProgress", "Services")', this,'@Url.Action("ServiceInfomation", "Services")');
            return false;
        });

        $(document).on('submit', '#ReturnForm', function (e) {
            e.preventDefault();
            callSubmitRedirect('@Url.Action("SetReturnJob", "Services")', this,'@Url.Action("Index", "Services")');
            return false;
        });

        $(document).on('submit', '#RequestForm', function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("RequestChangeDue_Form", "Services")', this);
            return false;
        });

        $(document).on('submit', "#RejectForm", function (e) {
            e.preventDefault();
            callSubmitRedirect('@Url.Action("SetReject","Services")', this,'@Url.Action("ServiceInfomation", "Services")');
            return false;
        });

        $(document).on('submit', "#MustApproveForm", function (e) {
            e.preventDefault();
            callSubmitRedirect('@Url.Action("SetMustApprove", "Services")', this,'@Url.Action("Index", "Services")');
            return false;
        });

        $(document).on('submit', '#AssignForm', function (e) {
            e.preventDefault();
            callSubmitPage('@Url.Action("SetAssign", "Services")', this);
            return false;
        });

        $(document).on('submit', '#ReturnAssignForm', function (e) {
            e.preventDefault();
            callSubmitRedirect('@Url.Action("SetReturnAssign", "Services")', this,'@Url.Action("Index", "Services")');
            return false;
        });
    </script>
}
@section breadcrumb{
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">Home</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("Index","Services")">Service</a></li>
            <li class="breadcrumb-item active" aria-current="page">Action</li>
        </ol>
    </nav>
}

<blockquote class="blockquote text-right">
    <p class="mb-0">[@Model.Services.Service_Key]&nbsp;@Html.DisplayFor(m => m.Services.Service_Subject)</p>
    <small class="blockquote-footer"><cite title="@Html.DisplayFor(m => m.Services.Create)">@Html.DisplayNameFor(m => m.Create_Name): @Html.DisplayFor(m => m.Create_Name)</cite></small>
</blockquote>
<div class="row">
    <div class="col-12 col-md-6 col-lg-7">
        <div class="card" id="serviceInfo">
            <div class="card-body">
                <div class="d-flex mb-3">
                    @{
                        if (ViewBag.AuthorizeIndex < 3)
                        {
                            <button class="btn btn-outline-danger" onclick="callModal('@Url.Action("SetReturnJob","Services",new { id = Model.Services.Service_Id})')">Return job</button>
                        }
                        if (!ViewBag.Is_MustBeApproved)
                        {
                            <button type="button" class="btn btn-warning ml-auto" onclick="callModal('@Url.Action("SetMustApprove","Services",new { id = Html.ValueFor(m => m.Services.Service_Id)})')">Must approved</button>
                        }
                        if (Model.Services.Ref_Service_Id.HasValue)
                        {
                            if (!Model.Services.Is_FreePoint)
                            {
                                if (Model.Services.Action_User_Id.HasValue)
                                {
                                    if (Model.Services.Action_User_Id.Equals(userId))
                                    {
                                        <button class="btn btn-outline-primary" type="button" onclick="setSuccessByIdRePage('@Url.Action("SetFreePoint","Services",new { id = Model.Services.Service_Id })')">Free point</button>
                                    }
                                }
                            }
                        }
                    }
                </div>

                <dl class="row">
                    <dt class="col-12 col-lg-3">@Html.DisplayNameFor(m => m.Services.Service_Description)</dt>
                    <dd class="col-12 col-lg-9"><span class="PreLine">@Html.DisplayFor(m => m.Services.Service_Description)</span></dd>
                    <dt class="col-4 col-lg-3">@Html.DisplayNameFor(m => m.User_Name)</dt>
                    <dd class="col-8 col-lg-9">
                        <blockquote class="blockquote">
                            <small class="text-primary font-weight-bold">@Html.DisplayFor(m => m.User_Name)</small>
                            <em class="blockquote-footer small">
                                @Html.ValueFor(m => m.Services.Users.Master_Processes.Master_Sections.Master_Departments.Master_Divisions.Master_Plants.Plant_Name),&nbsp;
                                @Html.ValueFor(m => m.Services.Users.Master_Processes.Master_Sections.Master_Departments.Master_Divisions.Division_Name),&nbsp;
                                @Html.ValueFor(m => m.Services.Users.Master_Processes.Master_Sections.Master_Departments.Department_Name)
                            </em>
                        </blockquote>
                    </dd>
                    <dt class="col-4 col-lg-3">@Html.DisplayNameFor(m => m.Services.Service_Contact)</dt>
                    <dd class="col-8 col-lg-9">@Html.DisplayFor(m => m.Services.Service_Contact)</dd>
                    @if (Model.Services.Update.HasValue)
                    {
                        <dt class="col-4 col-lg-3">@Html.DisplayNameFor(m => m.Services.Update)</dt>
                        <dd class="col-8 col-lg-9">@Html.DisplayFor(m => m.Services.Update)</dd>
                    }

                    <dt class="col-4 col-lg-3">@Html.DisplayNameFor(m => m.Services.System_Priorities.Priority_Name)</dt>
                    <dd class="col-8 col-lg-9"><span class="@Model.Services.System_Priorities.Priority_Class">@Html.DisplayFor(m => m.Services.System_Priorities.Priority_Name)</span></dd>
                    <dt class="col-4 col-lg-3">@Html.DisplayNameFor(m => m.Services.Service_DueDate)</dt>
                    <dd class="col-8 col-lg-9"><b>@Html.DisplayFor(m => m.Services.Service_DueDate)</b></dd>
                    <dt class="col-4 col-lg-3">Files</dt>
                    <dd class="col-8 col-lg-9">
                        @Model.ServiceFiles.Count Attachments
                        <ul class="list-unstyled">
                            @foreach (var item in Model.ServiceFiles.OrderBy(o => o.ServiceFile_Extension))
                            {
                                <li>
                                    <a href="@item.ServiceFile_Path" target="_blank" title="@item.ServiceFile_Name"><i class="fa fa-download"></i>&nbsp;@item.ServiceFile_Name</a>
                                </li>

                            }
                        </ul>
                    </dd>
                    <dt class="col-12">
                        @if (!Model.Services.Action_User_Id.HasValue && ViewBag.AuthorizeIndex < 3)
                        {
                            <button class="btn btn-outline-secondary" type="button" onclick="callModal('@Url.Action("SetAssign","Services",new { id=Model.Services.Service_Id })')">Set assign</button>
                        }

                        @if (Model.Services.Action_User_Id.HasValue)
                        {
                            if (Guid.Equals(Model.Services.Action_User_Id.Value, userId))
                            {
                                <button class="btn btn-outline-secondary" type="button" onclick="callModal('@Url.Action("SetReturnAssign","Services",new { id=Model.Services.Service_Id })')">Undo assign</button>
                            }
                        }
                    </dt>
                </dl>

                <div class="d-flex">
                    @if (ViewBag.AuthorizeIndex < 3)
                    {
                        <button class="btn btn-outline-danger" onclick="callModal('@Url.Action("SetReject","Services",new { id = Model.Services.Service_Id})')">Reject</button>
                    }

                    <div class="ml-auto">

                        @if (Model.Services.Action_User_Id.HasValue)
                        {
                            if (Model.Services.Action_User_Id == userId)
                            {
                                if (Model.ServiceChangeDueDate == null)
                                {
                                    <button class="btn btn-warning" onclick="callModal('@Url.Action("RequestChangeDue_Form","Services",new { id=Model.Services.Service_Id })')">Change due date</button>
                                }
                                else
                                {

                                    if (Model.ServiceChangeDueDate.User_Id.Value.Equals(userId))
                                    {
                                        <button class="btn btn-outline-danger" onclick="setDangerByIdRePage('@Url.Action("RequestChangeDue_Cancel","Services",new { id = Model.ServiceChangeDueDate.ChangeDueDate_Id })')">Cancel due date change</button>
                                    }
                                }
                            }

                        }
                        else
                        {
                            if (Model.ServiceChangeDueDate == null)
                            {
                                <button class="btn btn-warning" onclick="callModal('@Url.Action("RequestChangeDue_Form","Services",new { id=Model.Services.Service_Id })')">Change due date</button>

                            }
                            else
                            {

                                if (Model.ServiceChangeDueDate.User_Id.Value.Equals(userId))
                                {
                                    <button class="btn btn-outline-danger" onclick="setDangerByIdRePage('@Url.Action("RequestChangeDue_Cancel","Services",new { id = Model.ServiceChangeDueDate.ChangeDueDate_Id })')">Cancel due date change</button>
                                }
                            }
                        }

                        @if (Model.Services.Action_User_Id.HasValue)
                        {
                            if (Model.Services.Action_User_Id == userId)
                            {
                                <button class="btn btn-primary" onclick="callModal('@Url.Action("SetInProgress","Services",new { id=Model.Services.Service_Id })')">Start job</button>
                            }
                        }
                        else
                        {
                            <button class="btn btn-primary" onclick="callModal('@Url.Action("SetInProgress","Services",new { id=Model.Services.Service_Id })')">Start job</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-6 col-lg-5 d-flex align-items-stretch">
        <div class="card w-100" id="serviceComment">
            <div class="card-header">
                <h5 class="card-title">Comments</h5>
            </div>
            <div class="card-body overflow-auto">
                @{ Html.RenderAction("_CommentHistory", "Services", new { id = Model.Services.Service_Id }); }
            </div>
        </div>
    </div>
</div>

@{ Html.RenderAction("_RefService", "Services", new { id = Model.Services.Service_Id }); }